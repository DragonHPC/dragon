#!/usr/bin/env python3

"""Runs a command repeatedly until it fails"""

import argparse
import subprocess

DEFAULT_REPEATS = 5
DEFAULT_TIMEOUT = None
BIGNUM = 2 ** 63


def main(cmd_list, timeout=DEFAULT_TIMEOUT, repeats=DEFAULT_REPEATS):
    print(f'timeout {timeout} repeats {repeats}: {" ".join(cmd_list)}')

    if repeats is None:
        repeats = BIGNUM

    for k in range(repeats):
        try:
            subprocess.run(cmd_list, check=True, timeout=timeout, capture_output=True)
        except subprocess.TimeoutExpired as e:
            print('timeout expired!')
            print(e)

            if e.stdout is None:
                print('no stdout')
            else:
                print('stdout:')
                print(e.stdout.decode())

            if e.stderr is None:
                print('no stderr')
            else:
                print('stderr:')
                print(e.stderr.decode())

            return
        except subprocess.CalledProcessError as e:
            print('nonzero return code')
            print(e)

            if e.stdout is None:
                print('no stdout')
            else:
                print('stdout:')
                print(e.stdout.decode())

            if e.stderr is None:
                print('no stderr')
            else:
                print('stderr:')
                print(e.stderr.decode())
            return

        # subprocess.run(['rm *.log'], shell=True)
        print(k)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run a command repeatedly")
    parser.add_argument('--repeats', type=int,
                        help='max times to repeat the cmd',
                        default=DEFAULT_REPEATS)

    parser.add_argument('--timeout',
                        help='max time to wait for any invocation',
                        default=DEFAULT_TIMEOUT)

    parser.add_argument('cmd_list', nargs='*')

    args = parser.parse_args()
    main(args.cmd_list, timeout=args.timeout, repeats=int(args.repeats))
