#!/usr/bin/env python

import glob
import ciso8601
import datetime
import heapq

class PQNode:
    def __init__(self, filename):
        self._filename = filename
        self._file = open(filename,'r')
        self._ts = datetime.date(1970,1,1)
        if not self.set_next():
            raise EOFError(f'Empty log file {self._filename}!')

        #print(f'{self._filename=} {self._ts=} {self._line=}')

    def __hash__(self):
        return hash(self._ts)

    def __lt__(self,other):
        return self._ts < other._ts

    def set_next(self):
        try:
            self._line = self._file.readline()

            if len(self._line) == 0:
                return False

            self._ts = ciso8601.parse_datetime(self._line[:23])
        except EOFError:
            self._file.close()
            return False
        except Exception as ex:
            pass

        return True

    @property
    def filename(self):
        return self._filename

    @property
    def line(self):
        return f'[{self.filename}] {self._line}'

def main():
    files = glob.glob('*.log')
    nodes = []
    for filename in files:
        try:
            nodes.append(PQNode(filename))
        except EOFError:
            pass 

    heapq.heapify(nodes)

    while len(nodes)>0:
        node = heapq.heappop(nodes)
        print(node.line, end='')
        if node.set_next():
            heapq.heappush(nodes, node)

if __name__ == "__main__":
    main()
