@startuml
skinparam monochrome true
' skinparam responseMessageBelowArrow true
skinparam style strictuml
'   skinparam maxMessageSize 150

participant "Launcher" as LA
participant "Shepherd" as SH
participant "Global Service" as GS
participant "User Program\nmy.py"  as UP

autonumber "<b>[M0]"
activate LA
rnote left LA: [A1] Start Shepherd

create SH
LA -> SH: cmd/env parms @ OS spawn
activate SH
rnote over SH: [A2] Start,\nmake shared memory segment,\nmake default channels
LA<-SH: SHPing BE @ stdout
rnote over LA: [A3] attach to Shepherd channel
LA->SH: BEPing SH @ SH Channel
rnote over SH: [A4] Ping Launcher via Backend,\nReport on-node Channels up
LA<-SH: SHChannelsUp @ LA Channel
deactivate LA
rnote left LA: [A5] All channels up\n[A6] await all-up
rnote over SH: [A7] Start Global Services

create GS
SH -> GS: cmd/env parms @ OS spawn
deactivate SH
activate GS
rnote right GS: Start,\n[A8] Attach to channels,\n[A9] Ping Shepherd
/ rnote over SH: [A10] Pend on Message from Global Services
SH <- GS: GSPing SH @ SH Channel
deactivate GS
activate SH
rnote right GS: [A11] Pend on ping from SH
SH -> GS: SHPingGS @ GS Channel
activate GS
rnote right GS: [A12] Notify LA all-up
LA <- GS: GSIsUp @ BELA Channel

== Dragon Runtime is up ==

activate LA
rnote left LA: [A13] Start User Program my.py
LA -> GS: GSProcessCreate my.py
rnote right GS: [A14] Register head process,\n[A15] Start on Shepherd
SH <- GS: SHProcessCreate my.py, parms @ SH Channel
rnote over SH: [A16] Spawn my.py process <protocol with GS>

create UP
SH -> UP: cmd/env parms @ OS spawn
activate UP
rnote right UP: [A17] Example: print('foo')
SH <- UP: 'foo' @ stdout
rnote over SH: [A18] Package ouput
LA <- SH: SHFwdOutput 'foo' @ BELA Channel
rnote left LA: [A19] Recv output,\n[A20] Dedupe and print output
... Main output continues ...

@enduml








 