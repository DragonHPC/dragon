8 18
begin components
py "Python Client Program"
c1 "Client Prog 2"
orc "Orchestrator"
m1 "Manager 1"
m2 "Manager 2"
ls "Local Services (per node)"
end;
ltext@ py "Python Program creates a Distributed Dictionary with ddict(...)";
ltext@ py "Python Program creates the Orchestrator via native Popen with stdout redirected.";
ltext@ py "Orchestrator attaches to default pool, creates its main fli channel.";
;
orc py "Orchestrator writes serialized descriptor to FLI to stdout.";
;
ltext@ py "Python Program reads serialized descriptor from stdout of orc.";
;
py orc "DDCreate(respFLI, args of create)";
;
orc m1 "Managers are created via ProcessGroup with serialized (RespFLI, OrcMainFLI) of orchestrator.";
;
ltext@ m1 "Each manager creates pool, main channel (fli)";
;
ltext@ m1 "Each manager registers the Orchestrator's mainFLI as a key.";
ltext@ m1 "This occurs to distribute client connections to nodes.";
ltext@ m1 "Multiple managers on a node will result in only last in LS KV";
ltext@ m1 "Store which is OK.";
;
m1 ls "SHSetKV(OrcMainFLI, MainManagerFLI)";
m2 ls "SHSetKV(OrcMainFLI, MainManagerFLI)";
ls m1 "SHSetKVResponse";
ls m2 "SHSetKVResponse";
ltext@ orc "Registration to Orc occurs so all managers discover all other manager FLIs";
ltext@ orc "This allows clients to attach to dictionary by interacting with the manager";
ltext@ orc "on its own node. This allows attaching to be distributed.";
;
m1 orc "DDRegisterManager(RespFLI, m1ManagerMainFLI)";
m2 orc "DDRegisterManager(RespFLI, m2ManagerMainFLI)";
orc m1 "DDRegisterManagerResponse(list(ManagerMainFLIs)) to RespFLI";
orc m2 "DDRegisterManagerResponse(list(ManagerMainFLIs)) to RespFLI";
;
ltext@ py "All managers started and registered. Creation complete.";
;
orc py "DDCreateResponse";
;
ltext@ py "Orchestrator switches to processing main fli";
;
py ls "SHGetKV(OrcMainFLI)";
ls py "SHGetKVResponse(ManagerMainFLI)";
py m2 "DDRegisterClient(RespFLI, BufferedRespFLI) sent to manager";
m2 py "DDRegisterClientResponse(numManagers, clientID)";
;
ltext@ py "Client is now ready for Distributed Dictionary interaction";
ltext@ py "The ddict object can be shared with other multiprocessing processes.";
ltext@ py "It can also be serialized and the serialized descriptor passed to";
ltext@ py "lower level C or C++ code (and Fortran indirectly via C).";
ltext@ py "By some other means, the serialized fli for the Distributed Dictionary is shared.";
;
c1 ls "SHGetKV(OrcMainFLI)";
ls c1 "SHGetKVResponse(ManagerMainFLI)";
c1 m2 "DDRegisterClient(RespFLI, BufferedRespFLI) sent to mainFLI of chosen manager";
ltext@ m1 "Manager picks clientID in its allowable range";
m2 c1 "DDRegisterClientResponse(numManagers, clientID)";
;
ltext@ py "Client code called setitem and Manager 1 is chosen given key";
ltext@ py "First connection to Manager 1";
;
ltext@ py "Client/Manager ATTACH Protocol is only done on first interaction with a manager.";
ltext@ py "Start of Client/Manager ATTACH Protocol for a chosen manager.";
;
py m2 "DDConnectToManager(manager index 1) to main of manager on node";
;
m2 py "DDConnectToManagerResponse(managerMainFLI of m1)";
;
py m1 "DDRegisterClientID(RespFLI, BufferedRespFLI, clientID) to main of Manager";
;
m1 py "DDRegisterClientIDResponse(client registered to m1)";
;
ltext@ py "End of the Client/Manager ATTACH Protocol";
;
py m1 "DDPut operation (see detailed diagram on putting values)";
;
m1 py "DDPut response";
;
c1 m2 "DDConnectToManager(manager index 1) to main of manager on node";
;
m2 c1 "DDConnectToManagerResponse(managerMainFLI of m1)";
;
c1 m1 "DDRegisterClientID(BufferedRespFLI, clientID) to main of Manager";
;
m1 c1 "DDRegisterClientIDResponse";
;
c1 m1 "DDPut operation (see detailed diagram on putting values)";
;
m1 c1 "DDPut response";
;
ltext@ py "Client decides to detach from the distributed dictionary";
;
py m1 "DDDeregisterClient (BufferedRespFLI, clientID)";
py m2 "DDDeregisterClient (BufferedRespFLI, clientID)";
m1 py "DDDeregisterClientResponse";
m2 py "DDDeregisterClientResponse";
;
ltext@ py "Deregistering only occurs with managers to which a client was attached.";
;
ltext@ py "All defunct FLIs are now detached from managers and client";
