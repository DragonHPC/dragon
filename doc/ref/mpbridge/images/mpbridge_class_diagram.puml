@startuml

' title "Dragon mpbridge class diagram"

skinparam componentStyle uml2
skinparam shadowing false
skinparam monochrome false

' skinparam linetype ortho
skinparam linetype polyline
skinparam nodesep 30
skinparam class {
    BackgroundColor whitesmoke
    BorderColor black
    ArrowColor black
}

skinparam note {
    BackgroundColor lightyellow
    BorderColor black
}

set namespaceSeparator .

class multiprocessing.context.BaseContext {
    +set_start_method()
    +get_start_method()
    -_check_available()
}
note right: set_start_method sets one context \nas the DefaultContext

multiprocessing.context.ForkContext --|>multiprocessing.context.BaseContext 
multiprocessing.context.SpawnContext --|>multiprocessing.context.BaseContext 
multiprocessing.context.ForkServerContext --|>multiprocessing.context.BaseContext 
multiprocessing.context.DefaultContext -u-|>multiprocessing.context.BaseContext 

class dragon.mpbridge.AugmentedDefaultContext {
    +get_all_start_methods()
}
note bottom: Used to add our own start method. \nCompletely replaces the DefaultContext in the API.

dragon.mpbridge.AugmentedDefaultContext -u-|> multiprocessing.context.DefaultContext

class dragon.mpbridge.context.DragonContext {  
    +Queue() : DragonQueue
    +SimpleQueue() : DragonSimpleQueue
    +JoinableQueue() : DragonJoinableQueue
    -_check_available()
    string _name = DragonProcess._method
}
note top: "Dragon's own context class collects \n our versions of the Multiprocessing standard API"
dragon.mpbridge.context.DragonContext -u-|>  multiprocessing.context.BaseContext
dragon.mpbridge.context.DragonContext <-- dragon.mpbridge.queues.DragonQueue : returns
dragon.mpbridge.context.DragonContext <-- dragon.mpbridge.queues.DragonSimpleQueue  : returns
dragon.mpbridge.context.DragonContext <-- dragon.mpbridge.queues.DragonJoinableQueue : returns
dragon.mpbridge.context.DragonContext *-- dragon.mpbridge.process.DragonProcess

class dragon.mpbridge.process.DragonProcess {
    string _method = "dragon"
}

class dragon.mpbridge.queues.DragonQueue {
    bool joinable = False
    +cancel_join_thread()
    +close()
    +empty()
    +full()
    +get()
    +get_nowait()
    +join_thread()
    +put()
    +put_nowait()
    +qsize()
}
note top: "Set specific attributes to further \nspecialize the parent class"
dragon.mpbridge.queues.DragonQueue --|> dragon.mpbridge.queues.PatchedDragonNativeQueue

class dragon.mpbridge.queues.DragonJoinableQueue {
    bool joinable = True
    +cancel_join_thread()
    +close()
    +empty()
    +full()
    +get()
    +get_nowait()
    +join_thread()
    +put()
    +put_nowait()
    +qsize()
    +task_done()
    +join()
}
dragon.mpbridge.queues.DragonJoinableQueue --|> dragon.mpbridge.queues.PatchedDragonNativeQueue

class dragon.mpbridge.queues.DragonSimpleQueue {
    bool joinable = False
    +close()
    +empty() 
    +get() 
    +put()
}
dragon.mpbridge.queues.DragonSimpleQueue --|> dragon.mpbridge.queues.PatchedDragonNativeQueue
note top: A decorator is used to strip\npublic methods before inheriting

class dragon.mpbridge.queues.PatchedDragonNativeQueue {    
    +full()
    +empty()
    +get()
    +get_nowait()
    +put()
    +put_nowait()
    +task_done()
    +join()
    +poll()
    +destroy()
    +tread_wait()
    +size()
    +qsize()
    +close()
    +join_thread()
    +cancel_join_thread()
    - _reset()
    - _on_queue_feeder_error()
}
note right: "Implements Multiprocessing specific \nextensions/changes to our native API"
dragon.mpbridge.queues.PatchedDragonNativeQueue --|> dragon.native.queue.Queue

class dragon.native.queue.Queue {
    int maxsize
    int m_uid
    int block_size
    bool joinable
    +close()
    +full()
    +empty()
    +size()
    +get()
    +get_nowait()
    +put()
    +put_nowait()
    +task_done()
    +join()
    +poll()
    +destroy()
    +tread_wait()
}   
note right: "Implements Dragon's native Queue with its own \nAPI in Python, C, C++ and Fortran."







'in case we want to hide components
hide $hidden
@enduml