' machine for the Dragon native Pool() implementation


@startuml
skinparam componentStyle uml2
skinparam shadowing false
skinparam monochrome true

' skinparam linetype ortho
'skinparam linetype polyline
' skinparam nodesep 10
' skinparam ranksep 20

[*] -d-> Idle : ProcessGroup.__init 
Idle : * ProcessGroup object instantiated
Idle : * Manager is running and manages GroupContext
Idle : * No Dragon processes started 
Idle -d-> Maintain: ProcessGroup.start(), \nrestart==True
Idle -d-> Running: ProcessGroup.start(), \nrestart==False
Idle -d-> Stop: ProcessGroup.stop()

Running: * Manager waits for running processes to complete on their own
Running: * When all processes are done, the manager transitions the group to Idle
Running: * The ProcessGroup.join call returns once Running is reached
Running --> Idle: after processes\nexit
Running --> Running: ProcessGroup.join()
Running --> Error: One or more processes\nhave exit code > 0
Running --> Idle: ProcessGroup.kill()

Maintain: * Manager is checking with GS that processes are still alive
Maintain: * Manager restarts processes that died
Maintain: * Bad exit codes from processes are ignored
Maintain --> Idle: ProcessGroup.kill()
Maintain --> Running: ProcessGroup.join()
Maintain --> Stop: ProcessGroup.stop()
Maintain --> Running: ProcessGroup.kill(SIGTERM)
Maintain --> Error: Internal\nproblem

Stop: * Manager does not hold GroupContext anymore
Stop: * Manager process stopped, if no other clients are serviced
Stop: * No Dragon processes started
Stop --> [*]

Error: * Something went wrong, someone raised an exception
Error: * The group is in an undefined state
Error: * Some processes may be alive, others dead
Error --> Stop: ProcessGroup.stop()
Error --> Idle: ProcessGroup.kill()
@enduml