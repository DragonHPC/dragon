.. _Locks:

Scalable Locks
++++++++++++++

Interactions between processes in the Dragon run-time often use shared memory (e.g., Channels or managed
memory). Many processes may interact with this memory at the same time, which requires locks. For the lock to
be usable by all processes, which may or may not be threads, the lock must be fully embedded into the shared
memory. Additionally, modern node types may have hundreds of cores or more. The locks must therefore scale
under potentially significant contention.  Finally, many programs will require fairness among processes for
best performance while the remainder will prefer a throughput-optimized style lock.  Dragon locks support both
FIFO and greedy style locks to cover these use cases.

In addition, a shared readable lock/exclusive write lock is defined with blocking behavior to enable shared
read access to a common data structure while providing exclusive write access. This lock again provides
blocking properties where a process is put to sleep while waiting for access. The implementation provided here
is read preferring meaning that readers can read while other readers are reading and writers wait until all
readers are done reading. The API is given at the end of this document.

Architecture
============

.. figure:: images/scalable_locks.svg
    :name: scalable-locks 

    **Architecture of the Scalable Locks component**

Dragons scalable locks implementation provides access to

* A FIFO style lock, for truly fair access.
* A greedy style lock, for through-put optimized access.
* A readers write style lock, for shared read, but blocking write access.


Adapters
===============

.. toctree::
    :glob:
    :maxdepth: 1

    cy_scalable_locks.rst

Dragon Locks API
================

Structures and Types
--------------------

.. c:type:: atomic_uint_fast64_t dragonLockType_t

.. c:enum:: dragonLockKind_t

    .. c:enumerator:: DRAGON_LOCK_FIFO

        A best-effort FIFO style lock. This lock is not strictly FIFO in that it relies on processes obtaining
        two locks for scalability. Each of the sub-locks are perfect FIFO ticket locks.

    .. c:enumerator:: DRAGON_LOCK_GREEDY

        A lock optimized for throughput. It is highly likely that a process or thread that currently holds the
        lock and releases will obtain it again if it tries to right away. This lock is significantly faster in
        terms of ops/sec compared to the FIFO lock, but if fair progress among all actors is needed, the FIFO
        lock is likely to give the best overall performance.

.. c:enum:: dragonError_t

    .. c:enumerator:: DRAGON_SUCCESS

        The operations was successful.

    .. c:enumerator:: DRAGON_LOCK_ALLOC

        An internal memory allocation failure occurred.

    .. c:enumerator:: DRAGON_LOCK_INVALID_ARGUMENT

        An argument, like a ``NULL`` lock type was given.

    .. c:enumerator:: DRAGON_LOCK_PTHREAD_MUTEX_INIT

        The *pthread_mutex* failed to initialize.  Check *errno* for the exact error.
        Relevant only when :c:enum:`dragonLockKind_t` is ``DRAGON_LOCK_GREEDY``.

    .. c:enumerator:: DRAGON_LOCK_PTHREAD_MUTEX_DESTROY

        The *pthread_mutex* failed to destroy.  Check *errno* for the exact error.
        Relevant only when :c:enum:`dragonLockKind_t` is ``DRAGON_LOCK_GREEDY``.

    .. c:enumerator:: DRAGON_LOCK_PTHREAD_MUTEX_LOCK

        The *pthread_mutex* failed to lock.  Check *errno* for the exact error.
        Relevant only when :c:enum:`dragonLockKind_t` is ``DRAGON_LOCK_GREEDY``.

    .. c:enumerator:: DRAGON_LOCK_PTHREAD_MUTEX_UNLOCK

        The *pthread_mutex* failed to unlock.  Check *errno* for the exact error.
        Relevant only when :c:enum:`dragonLockKind_t` is ``DRAGON_LOCK_GREEDY``.

.. c:struct:: dragonFIFOLock_t

    .. c:var:: uint32_t my_node

        Internal tracking for what node thread is currently using as a waiting room lock.

    .. c:var:: size_t * lock_size

        Pointer into managed memory for location of variable with the size of the lock in bytes.

    .. c:var:: dragonLockType_t * initd

        Pointer into managed memory for location of flag if the lock has been initialized.

    .. c:var:: dragonLockType_t * now_serving

        Pointer into managed memory for location of variable of current ticket value for main lock.

    .. c:var:: dragonLockType_t * ticket_counter

        Pointer into managed memory for location of variable of next in line value for main lock.

    .. c:var:: dragonLockType_t * node_counter

        Pointer into managed memory for location of variable of next sub-lock to use.

    .. c:var:: dragonLockType_t ** nodes_now_serving

        Pointer into managed memory for location of array of current ticket values for sub-locks.

    .. c:var:: dragonLockType_t ** nodes_ticket_counter

        Pointer into managed memory for location of array of next in line values for sub-locks.

.. c:struct:: dragonGreedyLock_t

    .. c:var:: size_t * lock_size

        Pointer into managed memory for location of variable with the size of the lock in bytes.

    .. c:var:: dragonLockType_t * initd

        Pointer into managed memory for location of flag if the lock has been initialized.

    .. c:var:: pthread_mutex_t * mutex

        Pointer into managed memory for location of :c:type::`pthread_mutex_t` mutex.

.. c:union:: dragonLock_u

   .. c:var:: dragonFIFOLock_t * fifo

        Union pointer to FIFO lock struct

   .. c:var:: dragonFIFOLiteLock_t * fifo_lite

        Union pointer to FIFOLite lock struct

   .. c:var:: dragonGreedyLock_t * greedy

        Union pointer to Greedy lock struct

.. c:struct:: dragonLock_t

   Structure that holds the type of lock and a union pointer. Used for
   high-level API calls.

   .. c:var:: dragonLockKind_t kind

      Holds the type of the lock stored in the union.

   .. c:var:: dragonLock_u ptr

      Union of pointer types that refer to the initialized lock

Functions
---------

.. c:function:: size_t dragon_lock_size(dragonLockKind_t kind)

    Returns the number of bytes to allocate to support a lock of the given type.
    *kind* is the :c:enum:`dragonLockKind_t` kind of lock (e.g.,
    ``DRAGON_LOCK_FIFO``).

    Returns number of bytes.

.. c:function:: dragonError_t dragon_lock_init(dragonLock_t * dlock, void * ptr, dragonLockKind_t dlock_kind)

    Makes the appropriate initialization call based on the
    :c:type:`dragonLockKind_t` *dlock_kind*. Will malloc the necessary struct
    and store it in *dlock*.

    Returns the result of the appropriate initialization call of type :c:type:`dragonError_t`.

.. c:function:: dragonError_t dragon_lock_attach(dragonLock_t * dlock, void * ptr)

    Makes the appropriate attachment call based on the
    :c:type:`dragonLockKind_t` held in *ptr*. Will malloc the necessary struct
    and store it in *dlock*.

    Returns the result of the appropriate initialization call of type :c:type:`dragonError_t`.

.. c:function:: dragonError_t dragon_lock_detach(dragonLock_t * dlock)

    Makes the appropriate detach call based on the :c:type:`dragonLockKind_t`
    held in *dlock*. Will free the struct made in attach or init.

    Returns the result of the appropriate detach call of type :c:type:`dragonError_t`.

.. c:function:: dragonError_t dragon_lock_destroy(dragonLock_t * dlock)

    Makes the appropriate destroy call based on the :c:type:`dragonLockKind_t` held in *dlock*.
    Will free the struct made in attach or init.

    Returns the result of the appropriate destroy call of type :c:type:`dragonError_t`.

.. c:function:: dragonError_t dragon_lock(dragonLock_t * dlock)

    Makes the appropriate lock call based on the :c:type:`dragonLockKind_t` held in *dlock*.

    Returns the result of the appropriate lock call of type :c:type:`dragonError_t`.

.. c:function:: dragonError_t dragon_try_lock(dragonLock_t * dlock, int * locked)

    Makes the appropriate try lock call based on the :c:type:`dragonLockKind_t` held in *dlock*.

    Returns the result of the appropriate try lock call of type :c:type:`dragonError_t`.

.. c:function:: dragonError_t dragon_unlock(dragonLock_t * dlock)

    Makes the appropriate unlock call based on the :c:type:`dragonLockKind_t` held in *dlock*.

    Returns the result of the appropriate unlock call of type :c:type:`dragonError_t`.

.. c:function:: dragonError_t dragon_fifo_lock_init(dragonFIFOLock_t * dlock, void * ptr)

    Map a FIFO-style lock into the memory pointed by *ptr* and return a
    :c:type:`dragonFIFOLock_t` handle to the lock. The memory pointed to by
    *ptr* should have been allocated with the the size given from a call to by
    :c:func:`dragon_lock_size`.

    Returns ``DRAGON_SUCCESS`` or an error code.

.. c:function:: dragonError_t dragon_greedy_lock_init(dragonGreedyLock_t * dlock, void * ptr)

    Map a greedy-style lock into the memory pointed by *ptr* and return a :c:type:`dragonGreedyLock_t` handle
    to the lock. The memory pointed to by *ptr* should have been allocated with the the size given from a call
    to by :c:func:`dragon_lock_size`.

    Returns ``DRAGON_SUCCESS`` or an error code.

.. c:function:: dragonError_t dragon_fifo_lock_attach(dragonFIFOLock_t * dlock, void * ptr)

    Attach to the FIFO-style lock previously mapped into the memory pointed to by *prt* and return a
    :c:type:`dragonFIFOLock_t` handle to the lock.
    
    Returns ``DRAGON_SUCCESS`` or an error code.

.. c:function:: dragonError_t dragon_greedy_lock_attach(dragonGreedyLock_t * dlock, void * ptr)

    Attach to the greedy-style lock previously mapped into the memory pointed to by *prt* and return a
    :c:type:`dragonGreedyLock_t` handle to the lock.
    
    Returns ``DRAGON_SUCCESS`` or an error code.

.. c:function:: dragonError_t dragon_fifo_lock_detach(dragonFIFOLock_t * dlock)

    Detach from the FIFO-style lock given by the :c:type:`dragonFIFOLock_t`
    handle to the lock.

    Returns ``DRAGON_SUCCESS`` or an error code.

.. c:function:: dragonError_t dragon_greedy_lock_detach(dragonGreedyLock_t * dlock)

    Detach from the greedy-style lock given by the :c:type:`dragonGreedyLock_t`
    handle to the lock.

    Returns ``DRAGON_SUCCESS`` or an error code.

.. c:function:: dragonError_t dragon_fifo_lock_destroy(dragonFIFOLock_t * dlock)

    Remove the mapping of the FIFO-style lock given by the
    :c:type:`dragonFIFOLock_t` handle to the lock. Upon completion of this call,
    any attempts to use the lock from any process will have undefined results.

    Returns ``DRAGON_SUCCESS`` or an error code.

.. c:function:: dragonError_t dragon_greedy_lock_destroy(dragonGreedyLock_t * dlock)

    Remove the mapping of the greedy-style lock given by the
    :c:type:`dragonGreedyLock_t` handle to the lock. Upon completion of this
    call, any attempts to use the lock from any process will have undefined
    results.

    Returns ``DRAGON_SUCCESS`` or an error code.

.. c:function:: dragonError_t dragon_fifo_lock(dragonFIFOLock_t * dlock)

    Obtain the lock from the :c:type:`dragonFIFOLock_t` handle.

    Returns ``DRAGON_SUCCESS`` or an error code.

.. c:function:: dragonError_t dragon_greedy_lock(dragonGreedyLock_t * dlock)

    Obtain the lock from the :c:type:`dragonGreedyLock_t` handle.

    Returns ``DRAGON_SUCCESS`` or an error code.

.. c:function:: dragonError_t dragon_fifo_try_lock(dragonFIFOLock_t * dlock, int *locked)

    Attempt to obtain the lock from the :c:type:`dragonFIFOLock_t` handle. If
    the lock is already held this call will return with *locked* set to 0. If
    the lock is not already held and the caller obtains the lock *locked* will
    be set to 1.

    Returns ``DRAGON_SUCCESS`` or an error code.

.. c:function:: dragonError_t dragon_greedy_try_lock(dragonGreedyLock_t * dlock, int *locked)

    Attempt to obtain the lock from the :c:type:`dragonGreedyLock_t` handle. If
    the lock is already held this call will return with *locked* set to 0. If
    the lock is not already held and the caller obtains the lock *locked* will
    be set to 1.

    Returns ``DRAGON_SUCCESS`` or an error code.

.. c:function:: dragonError_t dragon_fifo_unlock(dragonFIFOLock_t * dlock)

    Release the lock from the :c:type:`dragonFIFOLock_t` handle.

    Returns ``DRAGON_SUCCESS`` or an error code.

.. c:function:: dragonError_t dragon_greedy_unlock(dragonGreedyLock_t * dlock)

    Release the lock from the :c:type:`dragonGreedyLock_t` handle.

    Returns ``DRAGON_SUCCESS`` or an error code.


.. code-block:: C
   :linenos:
   :caption: **Example of high-level API call for FIFO type**

   dragonError_t derr;
   dragonFIFOLock_t fifo_lock;
   dragonLock_t api_lock;
   api_lock.kind = DRAGON_LOCK_FIFO;
   api_lock.ptr.fifo = &fifo_lock;

   size_t memsize = dragon_lock_size(api_lock.kind);
   void * ptr = /* allocate memory however */
   derr = dragon_lock_init(&api_lock, ptr);
   if (derr != DRAGON_SUCCESS)
      // Handle error

   derr = dragon_lock(&api_lock);
   if (derr != DRAGON_SUCCESS)
      // Handle error

   dragon_unlock(&api_lock);
   dragon_lock_destroy(&api_lock);

Dragon Readers Writer Lock API
==============================

The RWLock object provides thread/process-safe access to a shared resource when it is being both written to
and read from. The RWLock provides exclusive access to a writer when no readers are currently reading the
object. It is a reader preferred lock meaning that a writer could be starved if there were always readers
holding the lock. But preferring readers also guarantees the maximum amount of concurrency.

Structures and Types
--------------------

.. c:struct:: dragonRWLock_t

    Internal only handle to a *RWLock* code. This maps the internal, shared memory, structure of a *RWLock*.


Life Cycle Functions
--------------------

.. c:function:: dragonError_t dragon_rwlock_init(dragonRWLock_t * dlock, void * ptr)

    Initialize an *RWLock* starting at *ptr* and initialize the handle to it in
    *dlock*. RWLock are on-node only objects. The memory at *ptr* must be big
    enough to hold the *RWLock* as determined by calling *dragon_rwlock_size*.

    Returns DRAGON_SUCCESS, TBD.

.. c:function:: dragonError_t dragon_rwlock_destroy(dragonRWLock_t * dlock)

    Destroy the *RWLock** with handle *dlock*. It should not be used after
    making this call.

    Returns DRAGON_SUCCESS, TBD.

.. c:function:: dragonError_t dragon_rwlock_attach(dragonRWLock_t * dlock, void * ptr)

    Attach to the *RWLock* pointed to by *ptr*, initializing the handle *dlock*.

    Returns DRAGON_SUCCESS, TBD.

.. c:function:: dragonError_t dragon_rwlock_detach(dragonRWLock_t * dlock)

    Detach from the *RWLock* with handle *dlock* and free any resources
    associated with this handle.

    Returns DRAGON_SUCCESS, TBD.

.. c:function:: size_t dragon_rwlock_size()

    Return the required size of a *RWLock*.

Operational Functions
---------------------

.. c:function:: dragonError_t dragon_rwlock_read_lock(dragonRWLock_t * dlock)

    Waits for a read lock on the *RWLock* to become available, acquires the read lock, and holds it until
    *dragon_rwlock_read_unlock* is called. The read lock may be shared by other processes/threads. The last
    reader to unlock puts the lock in a state where either a write or read lock may be acquired.  The
    implementation means that preference is given to readers over writers.

    Returns DRAGON_SUCCESS, TBD.

.. c:function:: dragonError_t dragon_rwlock_read_unlock(dragonRWLock_t * dlock)

    Releases the acquired lock for the current process/thread. If other readers currently have acquired a
    shared read lock, calling this function does not affect them. They still retain their acquired read lock
    through this object.

    Returns DRAGON_SUCCESS, TBD.

.. c:function:: dragonError_t dragon_rwlock_write_lock(dragonRWLock_t * dlock)

    Waits for a write lock on the *RWLock* to become available. This will occur when all readers have released
    their locks by calling *dragon_rwlock_read_unlock*. Once the write lock is acquired, all readers wait
    until the write lock is released by calling *dragon_rwlock_write_unlock*.
    
    Returns DRAGON_SUCCESS, TBD.
    
    .. c:function:: dragonError_t dragon_rwlock_write_unlock(dragonRWLock_t * dlock)

    Releases the acquired write lock on the *RWLock* referred to by *dlock*. Any waiting readers or writers
    will be able to proceed. No guarantee is made for which will proceed first.
    
    Returns DRAGON_SUCCESS, TBD.