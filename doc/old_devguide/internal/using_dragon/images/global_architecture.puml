@startuml

' title "Dragon MPBridge Architecture"

skinparam componentStyle uml2
skinparam shadowing false
skinparam monochrome true

skinparam linetype ortho
' skinparam linetype polyline
' skinparam nodesep 30
skinparam ranksep 80

interface "Python Multiprocessing API" as mp_api
[Python Multiprocessing] as MP

MP -u-> mp_api

component "dragon.mpbridge (Python)" as mpbridge {

    portin "Context API" as ctx_api
    portin "CTypes API" as ctypes_api
    portin "Shared Memory API" as shm_api

    [DragonContext] as ctx
    [DragonValue, DragonArray, \nDragonRawValue,\nDragonRawArray] as AV
    [DragonSharedMemory, \nDragonShareableList] as SML

    together {
        [Process, Popen] as PROC
        [DragonLock, DragonRLock, \nDragonCondition, DragonEvent, \nDragonSemaphore, DragonBarrier, \nDragonBoundedSemaphore] as L
        [DragonPipe, \nDragonListener, DragonClient] as PLC
        [DragonQueue, \nDragonJoinableQueue, \nDragonSimpleQueue] as Q 
        [log_to_stderr,\ncpu_count, get_logger] as FUNC
    }

    [DragonPool] as PO
    [DragonSyncManager] as MAN

    AV <-u- ctypes_api
    SML <-u- shm_api

    ctx -d-> PLC
    ctx -d-> MAN
    ctx -d-> L
    ctx -d-> Q
    ctx -d-> PO
    ctx -d-> FUNC
    ctx -u-> ctx_api
}

component "dragon.native (Python)" as DN {


    portin "Semaphore API" as dsem_api
    portin "Lock API" as dlock_api
    portin "Barrier API" as dbar_api
    portin "Event API" as dev_api
    portin "Pipe API" as dpipe_api
    portin "KeyValue API" as ddict_api

    portin "Queue API" as dqueue_api
    portin "Logging API" as dlog_api
    portin "Machine API" as dmach_api

    portin "Process API" as dproc_api 

    [Process] as DPROC

    together {
        [Semaphore] as SEM
        [Lock] as LCK
        [Barrier] as DBAR
        [Event] as DEV
    }

    [Pipe] as DPIPE
    [Distributed Dict] as DDICT
    [PoolWorkers] as DPWORK
    
    together {
        [Queue] as DQ
        [Machine] as DMACH
        [Logging] as DLOG
    }


    DPROC <-u- dproc_api
    SEM <-u- dsem_api
    LCK <-u- dlock_api
    DBAR <-u- dbar_api
    DEV <-u- dev_api
    DQ <-u- dqueue_api
    DPIPE <-u- dpipe_api
    DMACH <-u- dmach_api
    DLOG <-u- dlog_api
    DDICT <-u- ddict_api
    DDICT --> DPWORK

}

L -d-> dsem_api
L -d-> dlock_api
L -d-> dbar_api
L -d-> dev_api
Q -d-> dqueue_api
PLC -d-> dpipe_api
FUNC -d-> dmach_api
PROC -d-> dproc_api

component "Dragon Client API" as DG {
    
    portin "Channel API" as dgchan_api
    portin "Process API" as dgproc_api
    portin "Setup API" as dgsetup_api
    portin "Pool API" as dgpool_api
    portin "Node API" as dgmachine_api
    portout "      " as po_client
    
    [Channel] as DGCHAN
    [Process] as DGPROC
    [Pool] as DGPOOL
    [Setup] as DGSETUP
    [Node] as DGNODE

    DGNODE <-u- dgmachine_api
    DGCHAN <-u- dgchan_api
    DGPROC <-u- dgproc_api
    DGPOOL <-u- dgpool_api
    DGSETUP <-- dgsetup_api

    DGCHAN --> DGSETUP
    DGNODE --> DGSETUP
    DGPROC --> DGSETUP
    DGPROC --> DGCHAN

    DGCHAN -d-> po_client
    DGNODE -d-> po_client
    DGPOOL -d-> po_client
    DGPROC -d-> po_client
    DGSETUP -d-> po_client
}

SEM -d-> dgchan_api
LCK -d-> dgchan_api
DEV -d-> dgchan_api
DQ -d-> dgchan_api
DBAR -d-> dgchan_api
DMACH -d-> dgmachine_api
DPWORK -d-> dgproc_api
DDICT -d-> dgchan_api
DDICT -d-> dgproc_api
DDICT -d-> dgpool_api
' DPROC -d-> dgproc_api

component "Dragon Infrastructure" as DINFRA {

    portin "Messages API" as msg_api
    portin "Connection API" as conn_api
    portin "Logging API" as logg_api

    portout " "  as inf_out
    
    [Connection] as DCONN
    [Messages] as IMSG
    [Facts] as IFACTS
    [Parameters] as IPARAM
    [Util] as IUTIL
    [Channel Desc, Node Desc\nPool Desc, Process Desc] as IDESC
    [Logging] as ILOG

    IMSG <-u-> msg_api
    ' IFACTS <-u- msg_api
    ' IPARAM <-u- msg_api
    DCONN <-u- conn_api
    ' IUTIL <-u- msg_api
    IDESC <-u- msg_api
    ILOG <-u- logg_api

    DCONN -d-> inf_out
    IMSG -d-> inf_out
    ILOG -d-> inf_out

}

po_client -d-> msg_api

component "Dragon Core (C)" as DCORE {

    portin "Managed Memory API" as dmm_api
    portin "Channels API                                        " as dchan_api
    ' portin "                                    BCast API" as dbcast_api

    [Channels] as DCHAN
    [Managed Memory] as DMEM
    [Broadcast] as DBROAD

    DCHAN <-d- dchan_api
    DMEM <-d- dmm_api
    DBROAD <-d- dbcast_api
    DCHAN -l-> DMEM
    DCHAN -d-> DBROAD

}

inf_out -d-> dchan_api
inf_out -d-> dmm_api
' inf_out -d-> dbcast_api

[Global Services] as GS
[Local Services / Shepherd] as LS
[Launcher Backend] as LAB
[Transport] as TA


MP --> ctx_api
MP --> ctypes_api
MP --> shm_api

GS <-d-> msg_api
LS <-d-> msg_api
LAB <-d-> msg_api
TA <-d-> msg_api

'in case we want to hide components
hide $hidden
@enduml