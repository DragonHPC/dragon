' The Native use case.
' 
' History:
' Julius Donnert - Apr 2022
'
'

@startuml

' title "Dragon Distributed Architecture with native API"

skinparam componentStyle uml2
skinparam shadowing false
skinparam monochrome true

' skinparam linetype ortho
skinparam linetype polyline
' skinparam nodesep 10
' skinparam ranksep 20

frame "User Application" as UP {

    [Dragon Native] as DN
    [User Program] as User_Program
    
    interface "stdin/stdout/stderr" as program_stdout
    interface "Dragon Native API" as dragon_native_api

    User_Program <--> dragon_native_api
    dragon_native_api <-d-> DN
}

frame "Dragon Managed Memory" {

    [User Channels] as UCHAN
    [User Gateway Channels] as UGWCHAN

    interface "Channel API" as gateway_channel
    interface "Channel API" as user_channel

    UCHAN <-u-> user_channel
    UCHAN <-d-> gateway_channel
    UGWCHAN <-u-> gateway_channel

}

frame "Infrastructure Managed Memory" {
    [Global Services Channel] as GSCHAN
    [Shepherd Channel] as SHCHAN

}

[Shepherd] as SH
[Global Services] as GS

interface "Shepherd Messages" as shepherd_msg_api
interface "Global Services Messages" as gs_msg_api

SH <-d-> shepherd_msg_api
GS <-d-> gs_msg_api

GSCHAN <-u-> gs_msg_api
SHCHAN <-u-> shepherd_msg_api

User_Program <-down-> program_stdout
program_stdout <-down-> SH

DN <--> user_channel
DN <--> gs_msg_api
DN <--> shepherd_msg_api




'in case we want to hide components
hide $hidden
@enduml