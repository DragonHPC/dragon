@startuml
skinparam style strictuml

' Make sure the SVG scales in the rst correctly
skinparam svgDimensionStyle false

' Style crap
skinparam sequenceMessageAlign direction
skinparam LifelineStrategy nosolid
skinparam ParticipantBackgroundColor Khaki
skinparam NoteBackgroundColor PaleGreen
skinparam ParticipantBorderColor Black
skinparam NoteBorderColor Black
skinparam ArrowColor Black
skinparam SequenceLifeLineBorderColor Black

participant "Launcher Front End" as LA
participant "TCP Overlay Front End" as OF
participant "Launcher Back End" as BE
participant "TCP Overlay Back End" as OB
participant "Local Services" as LS
participant "Transport Agent" as TA
participant "Global Services" as GS
participant "User Program Entry" as UP

autonumber "<b>[M0]"

' function to keep track of action numbering
!global $action_count = 0
!function $action()
!global $action_count = $action_count + 1
!return "<b>[A" + $action_count + "]</b>"
!endfunction

' activate everything since everything is up
activate LA
activate OF
activate BE
activate OB
activate LS
activate TA
activate GS
activate UP

... Main Process running ...

' Handle head proc exiting
rnote over UP: $action() [[#head-proc-exit head proc exit]]
LS<-UP: [[#death-watcher OS process exit]]
deactivate UP
rnote over LS: $action() notify GS of exit
LS->GS: [[../infrastructure/messages_api.html#shprocessexit GS ch\nSHProcessExit]]
rnote over GS: $action() clean up existing globals\n$action() notify launcher of exit
BE<-GS: [[../infrastructure/messages_api.html#gsheadexit BE ch\nGSHeadExit]]
LA<-BE: [[../infrastructure/messages_api.html#gsheadexit {this message comes only from primary node} prime LA ch\nGSHeadExit]]
rnote over LA: $action() new head process OR\n[[#start-teardown start teardown]]\n$action() halt global services

' Proceed with teardown starting with global services
LA->BE: [[../infrastructure/messages_api.html#gsteardown {this is only sent to the primary node} prime BE ch\nGSTeardown]]
BE->GS: GS ch\nGSTeardown
rnote over GS: $action() [[#halt-global-services detach from channels]]
LS<-GS: [[../infrastructure/messages_api.html#gshalted {channels are detached. hence stdout} stdout\nGSHalted]]
rnote over GS: $action() GS exit
deactivate GS
BE<-LS: [[../infrastructure/messages_api.html#gshalted {only occurs on primary node} BE ch\nGSHalted]]
LA<-BE: LA ch\nGSHalted

' Halt transport agent
rnote over LA: $action() [[#halt-transport halt TA]]
LA->BE: [[#one-to-many BE ch\nSHHaltTA #N]]
BE->LS: [[../infrastructure/messages_api.html#shhaltta LS ch\nSHHaltTA]]
LS->TA: TA ch\nSHHaltTA
rnote over TA: $action() quiesce, timeout
LS<-TA: [[#halt-transport {This should be swapped with stdout} LS ch\nTAHalted]]
rnote over TA: $action() TA exit
deactivate TA
BE<-LS: [[../infrastructure/messages_api.html#tahalted BE ch\nTAHalted]]
LA<-BE: [[#many-to-one LA ch\nTAHalted #N]]
rnote over LA: $action() gather TAHalted\n$action() [[#issue-shteardown {this is where things can get messy} halt LS and BE]]

' Handle local services and backend in one swoop
LA->BE: [[#one-to-many BE ch\nSHTeardown #N]]
BE->LS: [[../infrastructure/messages_api.html#shteardown LS ch\nSHTeardown]]
rnote over LS: $action() detach from dragon logging channel
BE<-LS: [[../infrastructure/messages_api.html#shhaltbe BE ch\nSHHaltBE]]
LA<-BE: [[#many-to-one LA ch\nSHHaltBE #N]]
rnote over LA: $action() wait on N SHHaltBE\n$action() [[#issue-behalted Continue BE and LS halting]]
LA->BE: [[../infrastructure/messages_api.html#behalted BE ch\nBEHalted]]
BE->LS: [[../infrastructure/messages_api.html#behalted {done over stdout to limit memory errors} stdout\nBEHalted]]
rnote over LS: $action() deallocate shared mem\n$action() exit
deactivate LS

' Shutdown backend overlay
rnote over BE: $action() shutdown overlay
BE->OB: [[../infrastructure/messages_api.html#behaltoverlay CTRL ch\nBEHaltOverlay]]
rnote over OB: $action() quiesce, timeout
BE<-OB: [[../infrastructure/messages_api.html#overlayhalted CTRL ch\nOverlayHalted]]
rnote over OB: $action() exit
deactivate OB
rnote over BE: $action() wait on LS and Overlay exit\n$action() destroy memory\n$action() exit
LA<-BE: [[#wlm-launch WLM exit code]]
deactivate BE

' Shutdown frontend overlay and exit frontend
rnote over LA: $action() [[#wlm-launch wait on WLM to return]]
LA->OF: [[../infrastructure/messages_api.html#lahaltoverlay CTRL ch\nLAHaltOverlay]]
rnote over OF: $action() quiesce, timeout
LA<-OF: [[../infrastructure/messages_api.html#overlayhalted CTRL ch\nOverlayHalted]]
rnote over OF: $action() exit
deactivate OF
rnote over LA: $action() deallocate shared mem\n$action() exit
hnote across #violet: Dragon runtime is down

@enduml
