#!/usr/bin/python3

import argparse
import json
import os
import sys

from pathlib import Path

def remove_suffix(string_w_suffix, suffix):
    if suffix and string_w_suffix.endswith(suffix):
        return string_w_suffix[:-len(suffix)]
    else:
        return string_w_suffix

# get args

parser = argparse.ArgumentParser(
    prog='dragon-config',
    description='''Configure the build and runtime environments for Dragon
                in regards to 3rd party libraries. This is needed for building
                network backends for HSTA, as well as for GPU support more generally.
                In future releases, this script may also be used for runtime
                configuration of libraries.'''
)

parser.add_argument(
    '-a', '--add',
    help='''Add a colon-separated list of key-value pairs (key=value) to configure
         include and library paths for Dragon. Possible keys: ofi-[build,runtime]-lib, ofi-include,
         ucx-[build,runtime]-lib, ucx-include, mpi-[build,runtime]-lib, mpi-include, cuda-include,
         hip-include, ze-include.'''
)
parser.add_argument(
    '-c', '--clean',
    help='Clean out all config information.',
    action='store_true'
)
parser.add_argument(
    '-s', '--serialize',
    help='Serialize all key-value pairs currently in the configuration file into a single, colon-separated string that can be passed to the --add command.',
    action='store_true'
)

args = parser.parse_args()

# set base dir and other paths

try:
    base_dir = os.environ['DRAGON_BASE_DIR']
except:
    base_dir = ""

try:
    home_dir = Path.home()
    if os.path.exists(home_dir):
        dragon_dir = home_dir / '.dragon'
    else:
        print('home directory does not exist, using Dragon top directory for config file')
        dragon_dir = base_dir / '..' / '.dragon'

    if not os.path.exists(dragon_dir):
        os.makedirs(dragon_dir)

    config_filename = f'{dragon_dir}/dragon-config.json'
    makefile_filename = f'{base_dir}/.dragon-config.mk'
except:
    config_filename = ""
    makefile_filename = ""

# handle serialize command before updating anything

if args.serialize:
    if config_filename == "":
        print('failed to serialize environment: unable to find environment file', flush=True)
        sys.exit()

    if os.path.isfile(config_filename):
        with open(config_filename) as config_file:
            config_dict = json.load(config_file)

        ser_config = ''
        the_first_one = True
        for key in config_dict:
            if the_first_one:
                ser_config += f'{key}={config_dict[key]}'
                the_first_one = False
            else:
                ser_config += f':{key}={config_dict[key]}'
        print(ser_config, flush=True)
    else:
        print('no environment configuration available', flush=True)

# handle 'clean' command (do this first, so clean+set acts as a reset)

if args.clean:
    if config_filename == "" or makefile_filename == "":
        print('failed to clean environment: unable to find environment file(s)', flush=True)
        sys.exit()

    try:
        os.remove(config_filename)
        os.remove(makefile_filename)
    except:
        pass

# handle 'add' command

if args.add is not None:
    if base_dir == '':
        print('failed to update environment: DRAGON_BASE_DIR not set, try hack/setup', flush=True)
        sys.exit()

    if config_filename == '' or makefile_filename == '':
        print('failed to update environment: unable to find environment file(s)', flush=True)

    if os.path.isfile(config_filename):
        with open(config_filename) as config_file:
            config_dict = json.load(config_file)
    else:
        config_dict = {}

    user_input = args.add.split(':')
    new_env = dict(kv.split('=', 1) for kv in user_input)
    config_dict.update(new_env)

    with open(config_filename, 'w') as config_file:
        json.dump(config_dict, config_file)

    with open(makefile_filename, 'w') as make_file:
        for key in config_dict:
            path = Path(config_dict[key])
            if 'build-lib' in key:
                if 'ofi' in key:
                    libname = 'fabric'
                    backend_libname = 'dfabric_ofi'
                    make_file.write(f'CONFIG_OFI_LIBS := -L{path} -l{libname}\n')
                elif 'ucx' in key:
                    libname = 'ucp'
                    backend_libname = 'dfabric_ucx'
                    make_file.write(f'CONFIG_UCX_LIBS := -L{path} -l{libname}\n')
                elif 'mpi' in key:
                    libname = 'mpi'
                    backend_libname = 'dfabric_mpi'
                elif 'pmi' in key:
                    libname = 'pmi2'
                    backend_libname = ''

                # sanity check
                lib = path / f'lib{libname}.so'
                if not os.path.isfile(lib):
                    print(f'{lib} does not exist, make sure file paths have been set correctly', flush=True)

                make_file.write(f'CONFIG_BACKEND_LIBS := $(CONFIG_BACKEND_LIBS) -L. -l{backend_libname}\n')
                make_file.write(f'CONFIG_BACKEND_LIB_DEPS := $(CONFIG_BACKEND_LIB_DEPS) lib{backend_libname}.so\n')

            if 'runtime-lib' in key:
                path = Path(config_dict[key])

                # sanity check
                lib = path / f'lib{libname}.so'
                if not os.path.isfile(lib):
                    print(f'{lib} does not exist, make sure file paths have been set correctly', flush=True)

            if 'include' in key:
                path = Path(config_dict[key])
                make_file.write(f'CONFIG_INCLUDE := $(CONFIG_INCLUDE) -I{path}\n')

                if 'cuda' in key:
                    # sanity check
                    header = path / 'cuda_runtime_api.h'
                    if not os.path.isfile(header):
                        print(f'{header} does not exist, make sure file paths have been set correctly', flush=True)

                    make_file.write(f'CONFIG_SOURCES := $(CONFIG_SOURCES) {base_dir}/lib/gpu/cuda.cpp\n')
                    make_file.write(f'CONFIG_DEFINES := $(CONFIG_DEFINES) -DHAVE_CUDA_INCLUDE\n')

                if 'hip' in key:
                    # sanity check
                    header = path / 'hip' / 'hip_runtime_api.h'
                    if not os.path.isfile(header):
                        print(f'{header} does not exist, make sure file paths have been set correctly', flush=True)

                    make_file.write(f'CONFIG_SOURCES := $(CONFIG_SOURCES) {base_dir}/lib/gpu/hip.cpp\n')
                    make_file.write(f'CONFIG_DEFINES := $(CONFIG_DEFINES) -DHAVE_HIP_INCLUDE\n')

                if 'ze' in key:
                    # sanity check
                    header = path / 'ze_api.h'
                    if not os.path.isfile(header):
                        print(f'{header} does not exist, make sure file paths have been set correctly', flush=True)

                    make_file.write(f'CONFIG_SOURCES := $(CONFIG_SOURCES) {base_dir}/lib/gpu/ze.cpp\n')
                    make_file.write(f'CONFIG_DEFINES := $(CONFIG_DEFINES) -DHAVE_ZE_INCLUDE\n')

                if 'ofi' in key:
                    # sanity check
                    header = path / 'rdma' / 'fabric.h'
                    if not os.path.isfile(header):
                        print(f'{header} does not exist, make sure file paths have been set correctly', flush=True)

                    make_file.write(f'CONFIG_DEFINES := $(CONFIG_DEFINES) -DHAVE_OFI_INCLUDE\n')

                if 'ucx' in key:
                    # sanity check
                    header = path / 'ucp' / 'api' / 'ucp.h'
                    if not os.path.isfile(header):
                        print(f'{header} does not exist, make sure file paths have been set correctly', flush=True)

                    make_file.write(f'CONFIG_DEFINES := $(CONFIG_DEFINES) -DHAVE_UCX_INCLUDE\n')

                if 'mpi' in key:
                    # sanity check
                    header = path / 'mpi.h'
                    if not os.path.isfile(header):
                        print(f'{header} does not exist, make sure file paths have been set correctly', flush=True)

                    make_file.write(f'CONFIG_DEFINES := $(CONFIG_DEFINES) -DHAVE_MPI_INCLUDE\n')

