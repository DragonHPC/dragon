#!/usr/bin/env python3
def main():
    infile = open('./return_codes.h','r')
    outfile = open('./return_codes_map.h', 'w')
    outfile.write('/*\n')
    outfile.write('Copyright 2020, 2022 Hewlett Packard Enterprise Development LP\n\n')
    outfile.write('This file was auto-generated by return_codes_map_maker.py. Do Not Edit.\n')
    outfile.write('The source file to edit is src/include/dragon/return_codes.h\n*/\n\n')
    outfile.write('#ifndef DRAGON_RETURN_CODES_MAP\n')
    outfile.write('#define DRAGON_RETURN_CODES_MAP\n\n')
    outfile.write('/* This defines a static array to map\n')
    outfile.write(' * return values in return_codes.h\n')
    outfile.write(' * to a string representation. This\n')
    outfile.write(' * source file was auto-generated by\n')
    outfile.write(' * the tool return_codes_map_maker.py\n')
    outfile.write('*/\n\n')
    outfile.write('/* This file is not to be included by other C code.\n')
    outfile.write(' * Instead, use the dragon_get_rc_string API call\n')
    outfile.write(' * to translate a return code to its string representation.\n')
    outfile.write('*/\n\n')
    outfile.write('#include <dragon/return_codes.h>\n\n')
    outfile.write('static const char* dragon_rc_map[] = {\n')

    outfile2 = open('../../dragon/return_codes.pxd', 'w')
    outfile2.write('# This file was auto-generated by return_codes_map_maker.py. Do Not Edit.\n')
    outfile2.write('# The source file to edit is src/include/dragon/return_codes.h\n\n')
    outfile2.write('cdef extern from "<dragon/return_codes.h>":\n')
    outfile2.write('\n')
    outfile2.write('    ctypedef enum dragonError_t:\n')

    outfile3 = open('../../dragon/pydragon_rc.pyx', 'w')
    outfile3.write('# This file was auto-generated by return_codes_map_maker.py. Do Not Edit.\n')
    outfile3.write('from dragon.return_codes cimport *\n\n')
    outfile3.write('cpdef enum DragonError:\n')

    mapping = False
    for line in infile:
        if 'dragonError_t' in line:
            mapping = False

        if len(line.strip()) != 0 and mapping:
            tmp = line.strip().rstrip(',')
            if tmp.startswith('DRAGON_'):
                lst = tmp.split()
                val = lst[0]
                out_line = '    "'+lst[0]+'",'
                dragonError_t_val = lst[0] # No commas, no quotes in the return_codes.pxd file.
                enum_val = dragonError_t_val[7:]
                if val == 'DRAGON_BAD_RETURN_CODE':
                    # for last return code, don't end line with a comma.
                    out_line = out_line[:-1]
                outfile.write(out_line+'\n')
                outfile2.write('        '+dragonError_t_val+'\n')
                outfile3.write('    '+enum_val+' = '+dragonError_t_val+'\n')

        if 'dragonError_st' in line:
            mapping = True

    outfile.write('};\n\n')
    outfile.write(f'static const dragonError_t dragon_max_rc_value = DRAGON_BAD_RETURN_CODE;\n')
    outfile.write('\n#endif\n')

    outfile.close()
    outfile2.close()
    outfile3.close()


if __name__ == "__main__":
    main()
